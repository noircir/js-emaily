// These three libraries are for parsing SendGrid click results.
const _ = require('lodash');
const { Path } = require('path-parser');
// 'url' library comes with Node.js
const { URL } = require('url');
const mongoose = require('mongoose');
const requireLogin = require('../middlewares/requireLogin');
const requireCredits = require('../middlewares/requireCredits');
const Mailer = require('../services/Mailer');
const surveyTemplate = require('../services/emailTemplates/surveyTemplate');

// We could require Survey model from the model file,
// but sometimes mongoose complains during testing ('too many requests').
const Survey = mongoose.model('surveys');

module.exports = (app) => {
	app.get('/api/surveys/thanks', (req, res) => {
		res.send('Thanks for voting!');
	});

	app.get('/api/surveys/:id/yes', (req, res) => {
		res.send('This is Yes branch');
	});

	app.get('/api/surveys/:id/no', (req, res) => {
		res.send('This is No branch');
	});

	app.post('/api/surveys/webhooks', (req, res) => {
		const events = _.map(req.body, (event) => {
			const pathname = new URL(event.url).pathname;
			const p = new Path('/api/surveys/:surveyId/:choice');
			// console.log(pathname, p);
			console.log(p.test(pathname));
		});
	});

	app.post('/api/surveys', requireLogin, requireCredits, async (req, res) => {
		const { title, subject, body, recipients } = req.body;

		const survey = new Survey({
			title,
			subject,
			body,
			recipients: recipients.split(',').map((email) => ({ email: email.trim() })),
			// id generated by Mongo (mongoose)
			_user: req.user.id,
			dateSent: Date.now()
		});

		try {
			// Send an email here
			const mailer = new Mailer(survey, surveyTemplate(survey));
			await mailer.send();
			await survey.save();
			req.user.credits -= 1;
			const user = await req.user.save();

			res.send(user);
		} catch (err) {
			res.status(422).send(err);
		}
	});
};
